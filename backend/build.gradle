buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:endpoints-framework-gradle-plugin:1.0.3'
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:1.3.5'
    }
}

plugins {
    id 'de.fuerstenau.buildconfig' version '1.1.8'
}

repositories {
    jcenter()
    mavenCentral()
}

def projectId = 'kr-bobplanet'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.endpoints-framework-server'
apply plugin: 'com.google.cloud.tools.appengine'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    compile('com.google.endpoints:endpoints-framework:2.0.10') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    compile('com.google.endpoints:endpoints-management-control-appengine:1.0.5') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    compile('com.google.endpoints:endpoints-framework-auth:1.0.5') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }

    providedCompile 'javax.servlet:servlet-api:2.5'
    //providedCompile 'javax.inject:javax.inject:1'

    implementation('com.googlecode.objectify:objectify:5.1.21') {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
    implementation 'com.ganyo:gcm-server:1.0.2'
    implementation 'joda-time:joda-time:2.9.4'

    testImplementation 'junit:junit:4.12'
/*
    testImplementation 'com.google.appengine:appengine-testing:1.9.59'
    testImplementation 'com.google.appengine:appengine-api-stubs:1.9.59'
    testImplementation 'com.google.appengine:appengine-api-labs:1.9.59'
*/
}

endpointsServer {
    // Endpoints Framework Plugin server-side configuration
    hostname = "${projectId}.appspot.com"
}

appengine {
    deploy {
        version = findProperty("appengine.deploy.version")

        def promoteProp = findProperty("appengine.deploy.promote")
        if (promoteProp != null) {
            promote = new Boolean(promoteProp)
        }
    }
}

def props = new Properties()
if (rootProject.file('secrets.properties').exists()) {
    props.load(new FileInputStream(rootProject.file('secrets.properties')))
}

buildConfig {
    sourceSets {
        main {
            packageName = "kr.bobplanet.backend"
            buildConfigField "String", "CLIENTID_ANDROID_DEV", props.get("backend.clientid.android.dev")
            buildConfigField "String", "CLIENTID_ANDROID_RELEASE", props.get("backend.clientid.android.release")
            buildConfigField "String", "CLIENTID_WEB", props.get("backend.clientid.web")
            buildConfigField "String", "GCM_API_KEY", props.get("backend.gcm.apikey")
        }
    }
}

task replaceProjectId(type: Copy) {
    from 'src/main/webapp/WEB-INF/'
    include '*.xml'
    into 'build/exploded-backend/WEB-INF'
    expand(endpoints:[project:[id:projectId]])
    filteringCharset = 'UTF-8'
}
assemble.dependsOn replaceProjectId